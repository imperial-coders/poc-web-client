// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.176.0
//   protoc               v5.26.1
// source: server/protos/user-settings.proto

/* eslint-disable */
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import _m0 from "protobufjs/minimal";

export const protobufPackage = "userSettings";

export interface GetUserSettingsByUserIdRequest {
  userId: string;
}

export interface GetUserSettingsRequest {
  id: string;
}

export interface UserSettings {
  id: string;
  favoriteStarWarsCharacterSwapiId: string;
  createdAt: string;
  updatedAt: string;
}

export interface UpdateUserSettingsRequest {
  id: string;
  favoriteStarWarsCharacterSwapiId: string;
}

function createBaseGetUserSettingsByUserIdRequest(): GetUserSettingsByUserIdRequest {
  return { userId: "" };
}

export const GetUserSettingsByUserIdRequest = {
  encode(message: GetUserSettingsByUserIdRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserSettingsByUserIdRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserSettingsByUserIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserSettingsByUserIdRequest {
    return { userId: isSet(object.userId) ? globalThis.String(object.userId) : "" };
  },

  toJSON(message: GetUserSettingsByUserIdRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserSettingsByUserIdRequest>, I>>(base?: I): GetUserSettingsByUserIdRequest {
    return GetUserSettingsByUserIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserSettingsByUserIdRequest>, I>>(
    object: I,
  ): GetUserSettingsByUserIdRequest {
    const message = createBaseGetUserSettingsByUserIdRequest();
    message.userId = object.userId ?? "";
    return message;
  },
};

function createBaseGetUserSettingsRequest(): GetUserSettingsRequest {
  return { id: "" };
}

export const GetUserSettingsRequest = {
  encode(message: GetUserSettingsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetUserSettingsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetUserSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetUserSettingsRequest {
    return { id: isSet(object.id) ? globalThis.String(object.id) : "" };
  },

  toJSON(message: GetUserSettingsRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetUserSettingsRequest>, I>>(base?: I): GetUserSettingsRequest {
    return GetUserSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetUserSettingsRequest>, I>>(object: I): GetUserSettingsRequest {
    const message = createBaseGetUserSettingsRequest();
    message.id = object.id ?? "";
    return message;
  },
};

function createBaseUserSettings(): UserSettings {
  return { id: "", favoriteStarWarsCharacterSwapiId: "", createdAt: "", updatedAt: "" };
}

export const UserSettings = {
  encode(message: UserSettings, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.favoriteStarWarsCharacterSwapiId !== "") {
      writer.uint32(18).string(message.favoriteStarWarsCharacterSwapiId);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    if (message.updatedAt !== "") {
      writer.uint32(58).string(message.updatedAt);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UserSettings {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserSettings();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.favoriteStarWarsCharacterSwapiId = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.updatedAt = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserSettings {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      favoriteStarWarsCharacterSwapiId: isSet(object.favoriteStarWarsCharacterSwapiId)
        ? globalThis.String(object.favoriteStarWarsCharacterSwapiId)
        : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "",
    };
  },

  toJSON(message: UserSettings): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.favoriteStarWarsCharacterSwapiId !== "") {
      obj.favoriteStarWarsCharacterSwapiId = message.favoriteStarWarsCharacterSwapiId;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.updatedAt !== "") {
      obj.updatedAt = message.updatedAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UserSettings>, I>>(base?: I): UserSettings {
    return UserSettings.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UserSettings>, I>>(object: I): UserSettings {
    const message = createBaseUserSettings();
    message.id = object.id ?? "";
    message.favoriteStarWarsCharacterSwapiId = object.favoriteStarWarsCharacterSwapiId ?? "";
    message.createdAt = object.createdAt ?? "";
    message.updatedAt = object.updatedAt ?? "";
    return message;
  },
};

function createBaseUpdateUserSettingsRequest(): UpdateUserSettingsRequest {
  return { id: "", favoriteStarWarsCharacterSwapiId: "" };
}

export const UpdateUserSettingsRequest = {
  encode(message: UpdateUserSettingsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.favoriteStarWarsCharacterSwapiId !== "") {
      writer.uint32(18).string(message.favoriteStarWarsCharacterSwapiId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateUserSettingsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateUserSettingsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.favoriteStarWarsCharacterSwapiId = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateUserSettingsRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      favoriteStarWarsCharacterSwapiId: isSet(object.favoriteStarWarsCharacterSwapiId)
        ? globalThis.String(object.favoriteStarWarsCharacterSwapiId)
        : "",
    };
  },

  toJSON(message: UpdateUserSettingsRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.favoriteStarWarsCharacterSwapiId !== "") {
      obj.favoriteStarWarsCharacterSwapiId = message.favoriteStarWarsCharacterSwapiId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateUserSettingsRequest>, I>>(base?: I): UpdateUserSettingsRequest {
    return UpdateUserSettingsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateUserSettingsRequest>, I>>(object: I): UpdateUserSettingsRequest {
    const message = createBaseUpdateUserSettingsRequest();
    message.id = object.id ?? "";
    message.favoriteStarWarsCharacterSwapiId = object.favoriteStarWarsCharacterSwapiId ?? "";
    return message;
  },
};

export type UserSettingsServiceService = typeof UserSettingsServiceService;
export const UserSettingsServiceService = {
  getUserSettings: {
    path: "/userSettings.UserSettingsService/getUserSettings",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserSettingsRequest) => Buffer.from(GetUserSettingsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetUserSettingsRequest.decode(value),
    responseSerialize: (value: UserSettings) => Buffer.from(UserSettings.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserSettings.decode(value),
  },
  getUserSettingsBuUserId: {
    path: "/userSettings.UserSettingsService/getUserSettingsBuUserId",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetUserSettingsByUserIdRequest) =>
      Buffer.from(GetUserSettingsByUserIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetUserSettingsByUserIdRequest.decode(value),
    responseSerialize: (value: UserSettings) => Buffer.from(UserSettings.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserSettings.decode(value),
  },
  updateUserSettings: {
    path: "/userSettings.UserSettingsService/updateUserSettings",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateUserSettingsRequest) =>
      Buffer.from(UpdateUserSettingsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateUserSettingsRequest.decode(value),
    responseSerialize: (value: UserSettings) => Buffer.from(UserSettings.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UserSettings.decode(value),
  },
} as const;

export interface UserSettingsServiceServer extends UntypedServiceImplementation {
  getUserSettings: handleUnaryCall<GetUserSettingsRequest, UserSettings>;
  getUserSettingsBuUserId: handleUnaryCall<GetUserSettingsByUserIdRequest, UserSettings>;
  updateUserSettings: handleUnaryCall<UpdateUserSettingsRequest, UserSettings>;
}

export interface UserSettingsServiceClient extends Client {
  getUserSettings(
    request: GetUserSettingsRequest,
    callback: (error: ServiceError | null, response: UserSettings) => void,
  ): ClientUnaryCall;
  getUserSettings(
    request: GetUserSettingsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserSettings) => void,
  ): ClientUnaryCall;
  getUserSettings(
    request: GetUserSettingsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserSettings) => void,
  ): ClientUnaryCall;
  getUserSettingsBuUserId(
    request: GetUserSettingsByUserIdRequest,
    callback: (error: ServiceError | null, response: UserSettings) => void,
  ): ClientUnaryCall;
  getUserSettingsBuUserId(
    request: GetUserSettingsByUserIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserSettings) => void,
  ): ClientUnaryCall;
  getUserSettingsBuUserId(
    request: GetUserSettingsByUserIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserSettings) => void,
  ): ClientUnaryCall;
  updateUserSettings(
    request: UpdateUserSettingsRequest,
    callback: (error: ServiceError | null, response: UserSettings) => void,
  ): ClientUnaryCall;
  updateUserSettings(
    request: UpdateUserSettingsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UserSettings) => void,
  ): ClientUnaryCall;
  updateUserSettings(
    request: UpdateUserSettingsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UserSettings) => void,
  ): ClientUnaryCall;
}

export const UserSettingsServiceClient = makeGenericClientConstructor(
  UserSettingsServiceService,
  "userSettings.UserSettingsService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): UserSettingsServiceClient;
  service: typeof UserSettingsServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
